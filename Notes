Basics:
 - 3 steps in preparing a frame: 1. vertex shading, rasterization, fragment shading
 - vertex shading is the preparation of triangles/vertices. This is done by the gpu for every single object inside the frame. The end result are vertices with a x,y,z coordinate for the view screen. Note that this is not enough the display the frame as we need to do more processing of the framebuffer(lighting, converting to 2d image, etc). This step is more so called the graphics pipeline
 - rasterization takes the trigangles from previous steps to map to triangles generated by the graphics pipeline and map it to the correct pixels of a screen. Transforming triangles -> fragmenets
 - last steps is fragmenet shading. This including things like anti aliasing, lighting(which account for pixel blurring due to triangles taking up part of a pixel, so we want to shade the pixel to reduce blurring)
 
 Linear Algebra:
 - mostly going to be taking physical notes for this
 
OpenGL:
- This is apparently this most user friendly api for graphics programming
- GLFW : C lib required to create a opengl context and display a sample window, and processing user input

Cmake: 

